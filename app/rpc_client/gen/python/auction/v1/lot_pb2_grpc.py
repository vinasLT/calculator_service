# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from auction.v1 import lot_pb2 as auction_dot_v1_dot_lot__pb2


class LotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLot = channel.unary_unary(
                '/auction.v1.LotService/GetLot',
                request_serializer=auction_dot_v1_dot_lot__pb2.GetLotRequest.SerializeToString,
                response_deserializer=auction_dot_v1_dot_lot__pb2.GetLotResponse.FromString,
                _registered_method=True)
        self.GetSaleHistory = channel.unary_unary(
                '/auction.v1.LotService/GetSaleHistory',
                request_serializer=auction_dot_v1_dot_lot__pb2.GetSaleHistoryRequest.SerializeToString,
                response_deserializer=auction_dot_v1_dot_lot__pb2.GetSaleHistoryResponse.FromString,
                _registered_method=True)
        self.GetLotByVinOrLot = channel.unary_unary(
                '/auction.v1.LotService/GetLotByVinOrLot',
                request_serializer=auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotRequest.SerializeToString,
                response_deserializer=auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotResponse.FromString,
                _registered_method=True)
        self.GetCurrentBid = channel.unary_unary(
                '/auction.v1.LotService/GetCurrentBid',
                request_serializer=auction_dot_v1_dot_lot__pb2.GetCurrentBidRequest.SerializeToString,
                response_deserializer=auction_dot_v1_dot_lot__pb2.GetCurrentBidResponse.FromString,
                _registered_method=True)


class LotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSaleHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLotByVinOrLot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentBid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLot,
                    request_deserializer=auction_dot_v1_dot_lot__pb2.GetLotRequest.FromString,
                    response_serializer=auction_dot_v1_dot_lot__pb2.GetLotResponse.SerializeToString,
            ),
            'GetSaleHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSaleHistory,
                    request_deserializer=auction_dot_v1_dot_lot__pb2.GetSaleHistoryRequest.FromString,
                    response_serializer=auction_dot_v1_dot_lot__pb2.GetSaleHistoryResponse.SerializeToString,
            ),
            'GetLotByVinOrLot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLotByVinOrLot,
                    request_deserializer=auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotRequest.FromString,
                    response_serializer=auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotResponse.SerializeToString,
            ),
            'GetCurrentBid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentBid,
                    request_deserializer=auction_dot_v1_dot_lot__pb2.GetCurrentBidRequest.FromString,
                    response_serializer=auction_dot_v1_dot_lot__pb2.GetCurrentBidResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auction.v1.LotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auction.v1.LotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auction.v1.LotService/GetLot',
            auction_dot_v1_dot_lot__pb2.GetLotRequest.SerializeToString,
            auction_dot_v1_dot_lot__pb2.GetLotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSaleHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auction.v1.LotService/GetSaleHistory',
            auction_dot_v1_dot_lot__pb2.GetSaleHistoryRequest.SerializeToString,
            auction_dot_v1_dot_lot__pb2.GetSaleHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLotByVinOrLot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auction.v1.LotService/GetLotByVinOrLot',
            auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotRequest.SerializeToString,
            auction_dot_v1_dot_lot__pb2.GetLotByVinOrLotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auction.v1.LotService/GetCurrentBid',
            auction_dot_v1_dot_lot__pb2.GetCurrentBidRequest.SerializeToString,
            auction_dot_v1_dot_lot__pb2.GetCurrentBidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
