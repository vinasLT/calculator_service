# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from carfax.v1 import carfax_pb2 as carfax_dot_v1_dot_carfax__pb2


class CarfaxServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuyCarfax = channel.unary_unary(
                '/carfax.v1.CarfaxService/BuyCarfax',
                request_serializer=carfax_dot_v1_dot_carfax__pb2.BuyCarfaxRequest.SerializeToString,
                response_deserializer=carfax_dot_v1_dot_carfax__pb2.BuyCarfaxResponse.FromString,
                _registered_method=True)
        self.GetAllCarfaxesForUser = channel.unary_unary(
                '/carfax.v1.CarfaxService/GetAllCarfaxesForUser',
                request_serializer=carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserRequest.SerializeToString,
                response_deserializer=carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserResponse.FromString,
                _registered_method=True)
        self.GetCarfaxByVin = channel.unary_unary(
                '/carfax.v1.CarfaxService/GetCarfaxByVin',
                request_serializer=carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinRequest.SerializeToString,
                response_deserializer=carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinResponse.FromString,
                _registered_method=True)
        self.IsVinExists = channel.unary_unary(
                '/carfax.v1.CarfaxService/IsVinExists',
                request_serializer=carfax_dot_v1_dot_carfax__pb2.IsVinExistsRequest.SerializeToString,
                response_deserializer=carfax_dot_v1_dot_carfax__pb2.IsVinExistsResponse.FromString,
                _registered_method=True)


class CarfaxServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BuyCarfax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCarfaxesForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCarfaxByVin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsVinExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CarfaxServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuyCarfax': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyCarfax,
                    request_deserializer=carfax_dot_v1_dot_carfax__pb2.BuyCarfaxRequest.FromString,
                    response_serializer=carfax_dot_v1_dot_carfax__pb2.BuyCarfaxResponse.SerializeToString,
            ),
            'GetAllCarfaxesForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCarfaxesForUser,
                    request_deserializer=carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserRequest.FromString,
                    response_serializer=carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserResponse.SerializeToString,
            ),
            'GetCarfaxByVin': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCarfaxByVin,
                    request_deserializer=carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinRequest.FromString,
                    response_serializer=carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinResponse.SerializeToString,
            ),
            'IsVinExists': grpc.unary_unary_rpc_method_handler(
                    servicer.IsVinExists,
                    request_deserializer=carfax_dot_v1_dot_carfax__pb2.IsVinExistsRequest.FromString,
                    response_serializer=carfax_dot_v1_dot_carfax__pb2.IsVinExistsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'carfax.v1.CarfaxService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('carfax.v1.CarfaxService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CarfaxService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BuyCarfax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/carfax.v1.CarfaxService/BuyCarfax',
            carfax_dot_v1_dot_carfax__pb2.BuyCarfaxRequest.SerializeToString,
            carfax_dot_v1_dot_carfax__pb2.BuyCarfaxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllCarfaxesForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/carfax.v1.CarfaxService/GetAllCarfaxesForUser',
            carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserRequest.SerializeToString,
            carfax_dot_v1_dot_carfax__pb2.GetAllCarfaxesForUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCarfaxByVin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/carfax.v1.CarfaxService/GetCarfaxByVin',
            carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinRequest.SerializeToString,
            carfax_dot_v1_dot_carfax__pb2.GetCarfaxByVinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsVinExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/carfax.v1.CarfaxService/IsVinExists',
            carfax_dot_v1_dot_carfax__pb2.IsVinExistsRequest.SerializeToString,
            carfax_dot_v1_dot_carfax__pb2.IsVinExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
